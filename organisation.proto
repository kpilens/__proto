syntax = "proto3";

package organisation;

import "user.proto";
import "team.proto";
import "workspace.proto";
import "project.proto";

service OrganisationService {
    rpc CreateOrganisation (CreateOrganisationRequest) returns (CreateOrganisationResponse) {}

    rpc CreateOrganisations (CreateOrganisationsRequest) returns (CreateOrganisationsResponse) {}
    rpc  UpdateOrganisation (UpdateOrganisationRequest) returns (UpdateOrganisationResponse) {}
    rpc UpdateOrganisations (UpdateOrganisationsRequest) returns (UpdateOrganisationsResponse) {}
    rpc DeleteOrganisation (DeleteOrganisationRequest) returns (DeleteOrganisationResponse) {}
    rpc DeleteOrganisations (DeleteOrganisationsRequest) returns (DeleteOrganisationsResponse) {}

}


message Organisation {
    string name  = 1;
   string registrationNumber = 2;
  string  dataProtectionPolicyCountry = 3;
   bool hasLawfulBasisToCollectData = 4;
   string dataSubjects  = 5;
   string purposeOfDataCollectionAndProcessing = 6;
   string address = 7;
  string  numberOfEmployees = 8;
   string countryOfOperation = 9;
   string email = 10;
   OrganisationTypeEnum organisationType = 11;
   string createdAt = 12;
   string updatedAt = 13;
   string freeTrialExpirationDate = 14;
    string isPaying = 15;
   repeated User users = 16;
   repeated Team teams = 17;
    User owner = 18;
    repeated Workspace workspaces = 19;
  repeated Project  projects = 20;
}

enum OrganisationTypeEnum {
 SINGLE_USER = 0;
 AGENCY = 1;
ENTERPRISE = 2;
}

message CreateOrganisationRequest {
    string name = 1;
    string registrationNumber = 2;
    string dataProtectionPolicyCountry = 3;
    bool hasLawfulBasisToCollectData = 4;
    string dataSubjects = 5;
    string purposeOfDataCollectionAndProcessing = 6;
    string address = 7;
    string numberOfEmployees = 8;
    string countryOfOperation = 9;
    string email = 10;
    OrganisationTypeEnum organisationType = 11;
    string ownerId = 12;
}

message CreateOrganisationResponse  {
    int32 status = 1;
    repeated string error = 2;
    string organisationId = 3;

}

message CreateOrganisationsRequest {
    repeated CreateOrganisationRequest data =  1;
}

message CreateOrganisationsResponse {
    int32 status = 1;
    repeated string error = 2;
    repeated string organisationIds = 3;
}


message OrganisationWhereUniqueInput {
    string id = 1;
    string registrationNumber = 2;
    string email = 3;
}

message UpdateOrganisationInput {
    string name = 1;
    string registrationNumber = 2;
    string dataProtectionPolicyCountry = 3;
    bool hasLawfulBasisToCollectData = 4;
    string dataSubjects = 5;
    string purposeOfDataCollectionAndProcessing = 6;
    string address = 7;
    string numberOfEmployees = 8;
    string countryOfOperation = 9;
    OrganisationTypeEnum organisationType = 11;
}

message UpdateOrganisationRequest {
    OrganisationWhereUniqueInput where = 1;
    UpdateOrganisationInput data = 2;
}

message UpdateOrganisationResponse {
    int32 status = 1;
    repeated string error = 2;
    string organisationId = 3;
}

message UpdateOrganisationsRequest {
    repeated UpdateOrganisationRequest data = 1;
}

message UpdateOrganisationsResponse {
    int32 status = 1;
    repeated string error = 2;
    repeated string organisationIds = 3;
}

message DeleteOrganisationRequest {
   OrganisationWhereUniqueInput where = 1;
}

message DeleteOrganisationResponse {
    int32 status = 1;
    repeated string error = 2;
    string organisationId = 3;
}

message DeleteOrganisationsRequest{
  repeated OrganisationWhereUniqueInput where = 1;
}

message DeleteOrganisationsResponse {
    int32 status = 1;
    repeated string error = 2;
    repeated string organisationIds = 3;
}