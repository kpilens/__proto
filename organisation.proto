syntax = "proto3";
package organisation;
import "google/protobuf/struct.proto";
import "entities.proto";

service OrganisationService {
  rpc CreateOrganisation(CreateOrganisationRequest)
      returns (CreateOrganisationResponse) {}

  rpc CreateOrganisations(CreateOrganisationsRequest)
      returns (CreateOrganisationsResponse) {}
  rpc UpdateOrganisation(UpdateOrganisationRequest)
      returns (UpdateOrganisationResponse) {}
  rpc UpdateOrganisations(UpdateOrganisationsRequest)
      returns (UpdateOrganisationsResponse) {}
  rpc DeleteOrganisation(DeleteOrganisationRequest)
      returns (DeleteOrganisationResponse) {}
  rpc DeleteOrganisations(DeleteOrganisationsRequest)
      returns (DeleteOrganisationsResponse) {}

  rpc GetOrganisation(GetOrganisationRequest)
      returns (GetOrganisationResponse) {}
  rpc GetOrganisations(GetOrganisationsRequest)
      returns (GetOrganisationsResponse) {}
}

message CreateOrganisationRequest {
  string name = 1;
  string registrationNumber = 2;
  string dataProtectionPolicyCountry = 3;
  bool hasLawfulBasisToCollectData = 4;
  string dataSubjects = 5;
  string purposeOfDataCollectionAndProcessing = 6;
  string address = 7;
  string numberOfEmployees = 8;
  string countryOfOperation = 9;
  string email = 10;
  entities.OrganisationTypeEnum organisationType = 11;
  string ownerId = 12;
  string authorId = 13;
}

message CreateOrganisationResponse {
  int32 status = 1;
  repeated string error = 2;
  string organisationId = 3;
}

message CreateOrganisationsRequest {
  repeated CreateOrganisationRequest data = 1;
}

message CreateOrganisationsResponse {
  int32 status = 1;
  repeated string error = 2;
  repeated string organisationIds = 3;
}

message OrganisationWhereUniqueInput {
  optional string id = 1;
  optional string registrationNumber = 2;
  optional string email = 3;
}

message UpdateOrganisationRequest {
  optional string name = 1;
  optional string registrationNumber = 2;
  optional string dataProtectionPolicyCountry = 3;
  optional bool hasLawfulBasisToCollectData = 4;
  optional string dataSubjects = 5;
  optional string purposeOfDataCollectionAndProcessing = 6;
  optional string address = 7;
  optional string numberOfEmployees = 8;
  optional string countryOfOperation = 9;
  optional entities.OrganisationTypeEnum organisationType = 11;
  string id = 12;
  optional bool hasRenewedSubscription = 13;
  optional string ownerId = 14;
  optional string authorId = 15;
  optional string email = 16;
}

message UpdateOrganisationResponse {
  int32 status = 1;
  repeated string error = 2;
  string organisationId = 3;
}

message UpdateOrganisationsRequest {
  repeated UpdateOrganisationRequest data = 1;
}

message UpdateOrganisationsResponse {
  int32 status = 1;
  repeated string error = 2;
  repeated string organisationIds = 3;
}

message DeleteOrganisationRequest { OrganisationWhereUniqueInput where = 1; }

message DeleteOrganisationResponse {
  int32 status = 1;
  repeated string error = 2;
  string organisationId = 3;
}

message DeleteOrganisationsRequest { repeated string organisationIds = 1; }

message DeleteOrganisationsResponse {
  int32 status = 1;
  repeated string error = 2;
  repeated string organisationIds = 3;
}

message GetOrganisationRequest { OrganisationWhereUniqueInput where = 1; }

message GetOrganisationResponse {
  int32 status = 1;
  repeated string error = 2;
  entities.Organisation organisation = 3;
}

message GetOrganisationsRequest {
  google.protobuf.Struct paginateOptions = 1;
  google.protobuf.Struct findOptions = 2;
}

message GetOrganisationsResponse {
  int32 status = 1;
  repeated string error = 2;
  google.protobuf.Struct organisations = 3;
}